definitions:
  events.EventSummary:
    properties:
      eventID:
        description: ID used to identify all events in Ledger as well as used in contracts
        type: string
      eventName:
        description: A simple title for the event?
        type: string
      subEvents:
        additionalProperties:
          $ref: '#/definitions/subevents.SubEventSummary'
        description: A map of subevents in the event
        type: object
    type: object
  models.Order:
    properties:
      event_id:
        type: string
      order_id:
        type: string
      order_type:
        type: string
      price:
        type: number
      quantity:
        minimum: 1
        type: integer
      request_type:
        type: string
      subevent_id:
        type: string
      timestamp:
        type: integer
      user_id:
        type: string
    required:
    - price
    - quantity
    type: object
  models.Trade:
    properties:
      buyer_Order_id:
        type: string
      buyer_user_id:
        type: string
      event_id:
        type: string
      price:
        type: number
      quantity:
        minimum: 1
        type: integer
      seller_Order_id:
        type: string
      seller_user_id:
        type: string
      sub_event_id:
        type: string
      timestamp:
        type: integer
      trade_id:
        type: string
    required:
    - price
    - quantity
    type: object
  subevents.SubEventSummary:
    properties:
      contractVolume:
        description: Metrics for number of contracts issued in the event
        type: integer
      subEventEnd:
        description: NOT_FINAL
        type: string
      subEventName:
        description: A simple title for the event?
        type: string
      subEventStart:
        description: NOT_FINAL
        type: string
      traderVolume:
        description: Metrics for number of traders in the event
        type: integer
      valueVolume:
        description: Metrics for number of traders in the event
        type: integer
    type: object
info:
  contact: {}
paths:
  /admin/event:
    post:
      consumes:
      - application/json
      description: Create a new event with subevents
      produces:
      - application/json
      responses: {}
      summary: Create a new event
      tags:
      - events
    put:
      consumes:
      - application/json
      description: Modify an existing event such as the name, info NOT THE SUBEVENTS
      produces:
      - application/json
      responses: {}
      summary: Modify an existing event
      tags:
      - events
  /event:
    get:
      consumes:
      - application/json
      description: Get details about a specific event along with its subevents
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/events.EventSummary'
            type: array
      summary: Get details about a specific event
      tags:
      - events
  /events:
    get:
      description: Get list of all current events along with their subevents
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/events.EventSummary'
            type: array
      summary: Get list of all current events
      tags:
      - events
  /order:
    delete:
      consumes:
      - application/json
      description: Cancel an existing order for a specific event and subevent
      parameters:
      - description: Order details
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/models.Order'
      produces:
      - application/json
      responses: {}
      summary: Cancel an existing order
      tags:
      - orders
    post:
      consumes:
      - application/json
      description: Create a new order for a specific event and subevent
      parameters:
      - description: Order details
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/models.Order'
      produces:
      - application/json
      responses: {}
      summary: Create a new order
      tags:
      - orders
    put:
      consumes:
      - application/json
      description: Modify an existing order for a specific event and subevent
      parameters:
      - description: Order details
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/models.Order'
      produces:
      - application/json
      responses: {}
      summary: Modify an existing order
      tags:
      - orders
  /trades:
    get:
      consumes:
      - application/json
      description: Get the last n trades for a given event and subevent
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Trade'
            type: array
      summary: Get the last n trades for a given event and subevent
      tags:
      - trades
swagger: "2.0"
